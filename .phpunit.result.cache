{"version":1,"defects":{"DateRangeTest::testContainsReturnsTrueWhenDateInsideRange":8,"DateRangeTest::testContainsReturnsFalseWhenDateBeforeRange":8,"DateRangeTest::testContainsReturnsFalseWhenDateAfterRange":8,"DateRangeUtilsTest::testSortRangesByStart":8,"DateRangeUtilsTest::testMergeRanges":8,"TimezoneConfigTest::testCreateDateTimeWithInvalidDateThrowsException":7},"times":{"DateRangeTest::testContainsReturnsTrueWhenDateInsideRange":0,"DateRangeTest::testContainsReturnsFalseWhenDateBeforeRange":0,"DateRangeTest::testContainsReturnsFalseWhenDateAfterRange":0,"DateRangeTest::testRangesOverlapWhenTheyIntersect":0,"DateRangeTest::testRangesDoNotOverlapWhenSeparate":0,"DateRangeTest::testRangesOverlapOnEdge":0,"DateRangeTest::testShiftForward":0,"DateRangeTest::testShiftBackward":0,"DateRangeTest::testDurationInDaysForMultipleDays":0,"DateRangeTest::testDurationInDaysForSingleDay":0,"DateRangeUtilsTest::testSortRangesByStart":0,"DateRangeUtilsTest::testMergeRanges":0,"DateRangeTest::testDateRangeUsesConfiguredTimezone":0.001,"DateRangeTest::testGetConfiguredTimezone":0,"DateRangeTest::testToTimezoneConvertsToDifferentTimezone":0,"DateRangeTest::testToTimezoneWithInvalidTimezoneThrowsException":0,"DateRangeTest::testDateRangeWithDifferentTimezones":0,"TimezoneConfigTest::testGetTimezoneReturnsDefaultWhenNoEnvironmentVariable":0,"TimezoneConfigTest::testSetTimezoneWithValidTimezone":0,"TimezoneConfigTest::testSetTimezoneWithInvalidTimezoneThrowsException":0,"TimezoneConfigTest::testIsValidTimezoneWithValidTimezone":0,"TimezoneConfigTest::testIsValidTimezoneWithInvalidTimezone":0,"TimezoneConfigTest::testCreateDateTimeWithValidDate":0,"TimezoneConfigTest::testCreateDateTimeWithInvalidDateThrowsException":0,"TimezoneConfigTest::testCreateDateTimeUsesConfiguredTimezone":0,"TimezoneConfigTest::testResetTimezone":0,"BusinessDayConfigTest::testDefaultWeekendDays":0.001,"BusinessDayConfigTest::testSetWeekendDays":0,"BusinessDayConfigTest::testSetWeekendDaysWithInvalidDayThrowsException":0,"BusinessDayConfigTest::testAddHoliday":0,"BusinessDayConfigTest::testAddHolidayWithInvalidFormatThrowsException":0,"BusinessDayConfigTest::testAddHolidays":0,"BusinessDayConfigTest::testRemoveHoliday":0,"BusinessDayConfigTest::testClearHolidays":0,"BusinessDayConfigTest::testIsBusinessDayOnWeekday":0.001,"BusinessDayConfigTest::testIsBusinessDayOnWeekend":0,"BusinessDayConfigTest::testIsBusinessDayOnHoliday":0,"BusinessDayConfigTest::testGetNextBusinessDay":0,"BusinessDayConfigTest::testGetPreviousBusinessDay":0,"BusinessDayConfigTest::testCountBusinessDays":0,"BusinessDayConfigTest::testCountBusinessDaysWithHoliday":0,"BusinessDayConfigTest::testLoadHolidayCalendar":0,"BusinessDayConfigTest::testLoadHolidayCalendarWithInvalidCalendar":0,"BusinessDayConfigTest::testCustomWeekendConfiguration":0,"DateRangeTest::testBusinessDaysInRange":0,"DateRangeTest::testBusinessDaysInRangeWithHoliday":0,"DateRangeTest::testNonBusinessDaysInRange":0,"DateRangeTest::testShiftBusinessDaysForward":0,"DateRangeTest::testShiftBusinessDaysBackward":0,"DateRangeTest::testExpandToBusinessDays":0,"DateRangeTest::testGetBusinessDayRanges":0,"DateRangeTest::testGetBusinessDayRangesWithGaps":0,"DateRangeTest::testIsBusinessDaysOnly":0}}